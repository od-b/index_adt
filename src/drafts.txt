/*  deny invalid query without giving a good reason. still invalid tho.

    if (list_size(query) % 2 == 0) {
        /* Any given valid query will always have an odd number of tokens. Reasoning:
        * '<word> <word>' results in the indexer adding an "OR" inbetween.
        * As a consequence of this, all words must (or will, for "OR"), be connected by an operator.
        * Every operator must have adjacent terms, and parantheses must occur in multiples of 2.
        * => for every word, operator or parantheses added in addition to the 'root' word, n_tokens will 
        * be incremented by 2 if query is valid, and |tokens| will therefore never be even */
        *errmsg = "Invalid use of parantheses or operators.";
        return NULL;
    }

*/


/*  compare indexed chars

int compare_chars(char *a, char *b) {
    if (a[0] < b[0]) return -1;
    if (a[0] > b[0]) return 1;
    return 0;
}

static void print_char_set(set_t *chars) {
    set_iter_t *iter = set_createiter(chars);
    printf("index set of chars = [");
    while (set_hasnext(iter)) {
        char *c = (char *)set_next(iter);
        printf("%c", c[0]);
        (set_hasnext(iter)) ? (printf(", ")) : (printf("]\n"));
    }
    set_destroyiter(iter);
}

    index->indexed_chars = set_create((cmpfunc_t)compare_chars);

    size_t len = strlen(s);
    for (size_t i = 0; i < len; i++) {
        set_add(index->indexed_chars, (void *)&s[i]);
    }

    if (ASSERT_PARSE) print_char_set(index->indexed_chars);

*/



// static qnode_t *test_preprocessor_time(index_t *index, list_t *tokens, char **errmsg) {
//     const unsigned long long t_start = gettime();
//     qnode_t *leftmost = format_tokens(index, tokens, errmsg);
//     const unsigned long long t_end = (gettime() - t_start);
//     if (leftmost == NULL) {
//         return NULL;
//     }
//     if (list_size(tokens) != index->print_once) {
//         printf("Taking Times for Query:\n");
//         print_querynodes(tokens, leftmost, 1, 1, 0);
//         printf("     ________Times________\n");
//         printf(" %11s %14s \n", "Run No.", "Time (Î¼s)");
//         index->print_once = list_size(tokens);
//         index->run_number = 0;
//     }
//     index->run_number++;
//     printf("%11d %14llu\n", index->run_number, t_end);
//     return leftmost;
// }


static void print_term(qnode_t *oper, char *op) {
    /* this will not be pretty */
    size_t len = strlen(oper->left->token) + strlen(op) + strlen(oper->right->token) + 3;
    size_t diff = 40-len;
    if (diff <= 1) diff = 3;

    char space_buf[diff+1];
    memset(space_buf, ' ', (sizeof(char) * diff));
    space_buf[diff] = '\0';

    printf("%s", space_buf);
    printf(" %s '%s' %s ", oper->left->token, op, oper->right->token);
}


// /* return 0 on NULL or nonpar, otherwise returns paranthesis type */
// static int is_parenthesis(qnode_t *node) {
//     if (node && (node->type < 0))
//         return node->type;
//     return 0;
// }